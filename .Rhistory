with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
from pathlib import Path
from shiny import App, render, ui
import openeo
import json
import numpy as np
from scipy.interpolate import make_interp_spline, BSpline
import pandas as pd
import matplotlib.pyplot as plt
from datetime import timedelta
with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
ts_mean
ts_mean
no2 = [ts_mean[i] for i in range(len(ts_mean))]
ts_mean.unlist
ts_mean.unlist()
ts_mean = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value'])
ts_mean
with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value'])
with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value'])
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value'])
ts_mean_df.index.name = 'Date'
ts_mean_df['Value'] = ts_mean_df['Value'].apply(lambda x: x[0])
ts_mean_df
ts_mean_df.Date
class(ts_mean_df)
type(ts_mean_df)
ts_mean_df.names()
ts_mean_df['Date']
ts_mean_df.columns.tolist()
ts_mean_df.Value
ts_mean_df = pd.DataFrame.from_dict(data, orient='index', columns=['Value']).reset_index()
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_mean_df.columns = ['Date', 'Value']
ts_mean_df['Value'] = dfts_mean_df.apply(lambda x: x[0])
ts_mean_df['Value'] = ts_mean_df.apply(lambda x: x[0])
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_mean_df.columns = ['Date', 'Value']
ts_mean_df['Value'] = ts_mean_df.apply(lambda x: x[0])
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_mean_df
ts_mean_df.columns = ['Date', 'Value']
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=[['Value']]).reset_index()
ts_mean_df.columns = ['Date', 'Value']
ts_mean_df['Value'] = ts_mean_df.apply(lambda x: x[0])
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=[['Value']]).reset_index()
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_mean_df.columns = ['Date', 'Value']
ts_mean_df
ts_mean_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_mean_df.columns = ['Date', 'Value']
df['Value'] = df['Value'].str.get(0)
ts_mean_df['Value'] = df['Value'].str.get(0)
ts_mean_df['Value'] = ts_mean_df['Value'].str.get(0)
ts_mean_df
type(ts_mean_df.Value)
type(ts_mean_df.Value[1])
time = np.linspace(np.datetime64(input.date1date2()[0]), np.datetime64(input.date1date2()[1]), num=len(no2))
len(no2)
len(ts_mean_df)
time = np.linspace(np.datetime64("2022-01-01", np.datetime64("2022-01-31"), num=len(ts_mean_df))
:q
time = np.linspace(np.datetime64("2022-01-01", np.datetime64("2022-01-31"), num=len(ts_mean_df)))
time = np.linspace(np.datetime64("2022-01-01"), np.datetime64("2022-01-31"), num=len(ts_mean_df)))
time = np.linspace(np.datetime64("2022-01-01"), np.datetime64("2022-01-31"), num=len(ts_mean_df))
time = np.linspace(np.datetime64("2022-01-01"), np.datetime64("2022-01-25"), num=len(ts_mean_df))
time = np.linspace(np.datetime64(ts_mean_df.Date[0]), np.datetime64(ts_mean_df.Date[1]), num=len(ts_mean_df))
time = np.linspace(np.datetime64(ts_mean_df.Date[0]), np.datetime64(ts_mean_df.Date[1]))
time = pd.date_range(ts_mean_df.Date[0], ts_mean_df.Date[1], periods=len(ts_mean_df))
time
no2_k = spl(time)
?spl
rolling_mean = ts_mean_df.rolling(31).mean()
ts_mean_df
ts_mean_df['Date'] = pd.to_datetime(ts_mean_df['Date'])
ts_mean_df.set_index('Date', inplace=True)
rolling_mean = ts_mean_df.rolling(31).mean()
rolling_mean
ts_mean_df['Smooth'] = ts_mean_df.rolling(31).mean()
ts_mean_df
ts_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Value']).reset_index()
ts_df.columns = ['Date', 'Mean']
ts_df['Mean'] = ts_mean_df['Mean'].str.get(0)
ts_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Mean']).reset_index()
ts_df.columns = ['Date', 'Mean']
ts_df['Mean'] = ts_mean_df['Mean'].str.get(0)
ts_df
ts_df.columns = ['Date', 'Mean']
ts_df['Mean'] = ts_mean_df['Mean'].str.get(0)
ts_df['Mean'] = ts_df['Mean'].str.get(0)
ts_df
with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
print("mean time series read")
with open("data/time-series-max.json", "r") as f:
ts_max = json.load(f)
print("max time series read")
with open("data/time-series-ma.json", "r") as f:
ts_ma = json.load(f)
print("ma time series read")
ts_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Mean']).reset_index()
ts_df.columns = ['Date', 'Mean']
ts_df['Mean'] = ts_df['Mean'].str.get(0)
ts_max_df = pd.DataFrame.from_dict(ts_max, orient='index', columns=['Max']).reset_index()
ts_max_df.columns = ['Date', 'Max']
ts_df['Max'] = ts_max_df['Max'].str.get(0)
ts_ma_df = pd.DataFrame.from_dict(ts_ma, orient='index', columns=['MA']).reset_index()
ts_ma_df.columns = ['Date', 'MA']
ts_df['MA'] = ts_ma_df['MA'].str.get(0)
ts_ma_df = pd.DataFrame.from_dict(ts_ma, orient='index', columns=['MA']).reset_index()
ts_df
ts_df['Smooth'] = ts_df.rolling(31).mean()
ts_df['Date'] = pd.to_datetime(ts_df['Date'])
# set 'Date' column as index
ts_df.set_index('Date', inplace=True)
# Time Series Smoothing
ts_df['Smooth'] = ts_df.rolling(31).mean()
ts_df['Smooth'] = ts_df.rolling(31).mean("Mean")
ts_df
ts_df.plot(figsize=(8, 5))
plt.xlabel('Time')
plt.ylabel('Value')
plt.show()
import matplotlib.pyplot as plt
ts_df.plot(figsize=(8, 5))
plt.xlabel('Time')
plt.ylabel('Value')
plt.show()
ts_df.plot(figsize=(8, 5))
plt.xlabel('Time')
plt.ylabel('Value')
plt.show()
with open("data/time-series-mean.json", "r") as f:
ts_mean = json.load(f)
print("mean time series read")
with open("data/time-series-max.json", "r") as f:
ts_max = json.load(f)
print("max time series read")
with open("data/time-series-ma.json", "r") as f:
ts_ma = json.load(f)
print("ma time series read")
ts_df = pd.DataFrame.from_dict(ts_mean, orient='index', columns=['Mean']).reset_index()
ts_df.columns = ['Date', 'Mean']
ts_df['Mean'] = ts_df['Mean'].str.get(0)
ts_max_df = pd.DataFrame.from_dict(ts_max, orient='index', columns=['Max']).reset_index()
ts_max_df.columns = ['Date', 'Max']
ts_df['Max'] = ts_max_df['Max'].str.get(0)
ts_ma_df = pd.DataFrame.from_dict(ts_ma, orient='index', columns=['MA']).reset_index()
ts_ma_df.columns = ['Date', 'MA']
ts_df['MA'] = ts_ma_df['MA'].str.get(0)
ts_df
ts_df['Date'] = pd.to_datetime(ts_df['Date'])
# set 'Date' column as index
ts_df.set_index('Date', inplace=True)
# Time Series Smoothing
ts_df['Smooth'] = ts_df.rolling(31).mean("Mean")
ts_df['Smooth'] = ts_df['Mean'].rolling(31).mean()
ts_df
ts_df.plot(figsize=(8, 5))
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('NO2 Time Series from SENTINEL 5P')
plt.show()
from shiny import App, render, ui, reactive
reticulate::repl_python()
reticulate::repl_python()
