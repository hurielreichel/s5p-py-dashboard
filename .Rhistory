from pathlib import Path
from shiny import App, render, ui, reactive
from shinywidgets import output_widget, render_widget
import openeo, json, asyncio, sys, rasterio, imageio, os, re, datetime
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import ipyleaflet as L
from datetime import date
from shiny.types import ImgData
# openeo connection and authentication
# https://open-eo.github.io/openeo-python-client/auth.html
## In Linux terminal :
## openeo-auth oidc-auth openeo.cloud
con = openeo.connect("openeo.cloud")
con.authenticate_oidc()
input.date1date22 = list()
input.date1date22[0] = "2019-01-01"
with rasterio.open("data/map.tif") as src:
image = src.read(1, masked=True)
vmin, vmax = image.min(), image.max() # Define minimum and maximum values for the color map
print("raster read")
with rasterio.open("data/map.tif") as src:
image = src.read(1, masked=True)
vmin, vmax = image.min(), image.max() # Define minimum and maximum values for the color map
print("raster read")
fig, ax = plt.subplots()
im = ax.imshow(image, cmap='viridis', vmin=vmin, vmax=vmax)
cbar = fig.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
ax.set_title('NO2 Concentration Screenshot at '+input.date().strftime('%Y-%m-%d'))
plt.show()
input = list()
input.date1date290
input.date1date2()
input.date1date2() = ["2019-01-01", "2019-06-01"]
input.date1date2 = ["2019-01-01", "2019-06-01"]
)
temporal_extent = ["2019-01-01", "2019-06-01"],
datacube = con.load_collection(
"SENTINEL_5P_L2",
spatial_extent = extent,
temporal_extent = ["2019-01-01", "2019-06-01"],
bands=["NO2"]
)
extent = { # MÃ¼nster
"type": "Polygon",
"coordinates": [[
[12, 12],
[8, 12],
[8, 8],
[12, 8],
[12, 12]
]]
}
datacube = con.load_collection(
"SENTINEL_5P_L2",
spatial_extent = extent,
temporal_extent = ["2019-01-01", "2019-06-01"],
bands=["NO2"]
)
datacube_cloud = con.load_collection(
"SENTINEL_5P_L2",
spatial_extent = extent,
temporal_extent = ["2019-01-01", "2019-06-01",
bands=["CLOUD_FRACTION"]
)
datacube_cloud = con.load_collection(
"SENTINEL_5P_L2",
spatial_extent = extent,
temporal_extent = ["2019-01-01", "2019-06-01"],
bands=["CLOUD_FRACTION"]
)
def threshold_(data):
threshold = data[0].gte(0.5)
return threshold
cloud_threshold = datacube_cloud.apply(process = threshold_)
cloud_threshold
datacube = datacube.mask(cloud_threshold)
datacube = datacube.apply_dimension(dimension = "t", process = "array_interpolate_linear")
datacube
