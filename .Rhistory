import openeo, json, asyncio, sys, rasterio, imageio, os, re, datetime
connection = openeo.connect("openeo.cloud")
connection = openeo.connect("openeo.cloud").authenticate_oidc()
year = 2019
extent = { # MÃ¼nster
"type": "Polygon",
"coordinates": [[
[7.737228350528245,51.86687168604513],
[7.507741544165615,51.86687168604513],
[7.507741544165615,52.05013100121914],
[7.737228350528245,52.05013100121914],
[7.737228350528245,51.86687168604513]
]]
}
datacube = connection.load_collection(
"TERRASCOPE_S5P_L3_NO2_TD_V1",
spatial_extent = extent,
temporal_extent = [f"{year}-01-01", f"{year}-12-31"]
)
datacube = datacube.apply_dimension(dimension = "t", process = "array_interpolate_linear")
moving_average_window = 31
udf = openeo.UDF("""
from pandas import Series
import numpy as np
def apply_timeseries(series: Series, context: dict) -> Series:
return np.convolve(series, np.ones({n})/{n}, mode='same')
""".format(n = moving_average_window))
datacube = datacube.apply_dimension(dimension = "t", process = udf)
from pandas import Series
import numpy as np
N = 31
def apply_timeseries(series: Series, context: dict) -> Series:
return np.convolve(series, np.ones(N)/N, mode='same')
datacube = datacube.save_result(format = "netCDF")
results = connection.execute(datacube)
reticulate::repl_python()
